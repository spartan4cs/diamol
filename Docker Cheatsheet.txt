Docker cheatsheet

ch01--------------------------------------------------------------------


 Remembering the cleanup commands
Docker doesn’t automatically clean up containers or application packages for you. When you quit Docker Desktop (or stop the Docker service), all your containers stop and they don’t use any CPU or memory, but if you want to, you can clean up at the end of every chapter by running this command:

docker container rm -f $(docker container ls -aq)

And if you want to reclaim disk space after following the exercises, you can run this command:

docker image rm -f $(docker image ls -f reference='diamol/*' -q)

Docker is smart about downloading what it needs, so you can safely run these commands at any time. The next time you run containers, if Docker doesn’t find what it needs on your machine, it will download it for you.







ch02--------------------------------------------------------------------

TRY IT NOW Enter this command, which will run the Hello World container:
docker container run diamol/ch02-hello-diamol

TRY IT NOW Repeat the exact same Docker command:
docker container run diamol/ch02-hello-diamol

TRY IT NOW Run the following command in your terminal session:
docker container run --interactive --tty diamol/base

TRY IT NOW Open up a new terminal session, and you can get details of all the running containers with this command:
docker container ls

TRY IT NOW docker container top lists the processes running in the container. I’m using f1 as a short form of the container ID f1695de1f2ec :
 > docker container top f1

TRY IT NOW docker container logs displays any log entries the container has collected:
 > docker container logs f1

TRY IT NOW docker container inspect shows you all the details of a container:
> docker container inspect f1

TRY IT NOW Run docker container ls --all , which shows all containers in any status:
> docker container ls --all


TRY IT NOW Here’s a simple example, running a website in a container:
docker container run --detach --publish 8088:80 diamol/ch02-hello- diamol-web


TRY IT NOW docker container stats is another useful one: it shows a live view of how much CPU, memory, network, and disk the container is using. The output is slightly different for Linux and Windows containers:
> docker container stats e53

TRY IT NOW Run this command to remove all your containers:
docker container rm --force $(docker container ls --all --quiet)







ch03-web-ping--------------------------------------------------------------------

TRY IT NOW Pull the container image for the web-ping application:
docker image pull diamol/ch03-web-ping

TRY IT NOW Let’s run a container from the image and see what the app does:
docker container run -d --name web-ping diamol/ch03-web-ping

TRY IT NOW Have a look at the logs from the application, which are being collected by Docker:
docker container logs web-ping

TRY IT NOW Remove the existing container, and run a new one with a value specified for the TARGET environment variable:
 docker rm -f web-ping
 docker container run --env TARGET=google.com diamol/ch03-web-ping

TRY IT NOW Turn this Dockerfile into a Docker image by running docker image build :
docker image build --tag web-ping .
The --tag argument is the name for the image, and the final argument is the directory where the Dockerfile and related files are.

TRY IT NOW List all the images where the tag name starts with “w”:
docker image ls 'w*'

TRY IT NOW Run a container from your own image to ping Docker’s website every five seconds:
docker container run -e TARGET=docker.com -e INTERVAL=5000 web-ping

TRY IT NOW Check the history for your web-ping image:
docker image history web-ping

TRY IT NOW You can list images with docker image ls , which also shows the size of the image. If you don’t include a filter in the command, you’ll see all images:(logical size of the image)
docker image ls


TRY IT NOW My image list shows a total of 363.96 MB of images, but that’s the total logical size. The system df command shows exactly how much disk space Docker is using:
docker system df

TRY IT NOW Make a change to the app.js file in the ch03-web-ping directory. It doesn’t have to be a code change; just adding a new empty line at the end of the file will do. Then build a new version of your Docker image:
docker image build -t web-ping:v2 .


Listing 3.2 The optimized web-ping Dockerfile

 FROM diamol/node
 CMD ["node", "/web-ping/app.js"]
 ENV TARGET="blog.sixeyed.com" \
       METHOD="HEAD" \
       INTERVAL="3000"
 WORKDIR /web-ping
 COPY app.js .

TRY IT NOW The optimized Dockerfile is in the source code for this chapter too. Switch to the web-ping-optimized folder and build the image from the new Dockerfile:

 cd ../web-ping-optimized
 docker image build -t web-ping:v3 .
 
 
 
 ch04--------------------------------------------------------------------

Listing 4.1 A multi-stage Dockerfile--------------------------

 FROM diamol/base AS build-stage
 RUN echo 'Building...' > /build.txt
 FROM diamol/base AS test-stage
 
 COPY --from=build-stage /build.txt /build.txt
 RUN echo 'Testing...' >> /build.txt
 
 FROM diamol/base
 COPY --from=test-stage /build.txt /build.txt
 CMD cat /build.txt
 
 TRY IT NOW Open a terminal session to the folder where you stored the book’s source code, and build this multi-stage Dockerfile:
 cd ch04/exercises/multi-stage
 docker image build -t multi-stage .
 
 
 
 Listing 4.2 Dockerfile for building a Java app with Maven-----------------------

 FROM diamol/maven AS builder
 
 WORKDIR /usr/src/iotd
 COPY pom.xml .
 RUN mvn -B dependency:go-offline
 
 COPY . .
 RUN mvn package
 
 # app
 FROM diamol/openjdk
 
 WORKDIR /app
 COPY --from=builder /usr/src/iotd/target/iotd-service-0.1.0.jar .
 
 EXPOSE 80
 ENTRYPOINT ["java", "-jar", "/app/iotd-service-0.1.0.jar"]
 
 
 TRY IT NOW Browse to the Java application source code and build the image:
 cd ch04/exercises/image-of-the-day
 docker image build -t image-of-the-day .
 
 -------------------------------------
 TRY IT NOW Create a Docker network for containers to communicate with each other:
 docker network create nat
 
 TRY IT NOW Run a container from the image, publishing port 80 to the host computer, and connecting to the nat network:
 docker container run --name iotd -d -p 800:80 --network nat image-of-the-day
 
 
 
 Listing 4.3 Dockerfile for building a Node.js app with npm----------------------------

 FROM diamol/node AS builder
 
 WORKDIR /src
 COPY src/package.json .
 
 RUN npm install
 
 # app
 FROM diamol/node
 
 EXPOSE 80
 CMD ["node", "server.js"]
 
 WORKDIR /app
 COPY --from=builder /src/node_modules/ /app/node_modules/
 COPY src/ .
 
 
 TRY IT NOW Browse to the Node.js application source code and build the image:
 cd ch04/exercises/access-log
 docker image build -t access-log .
 
 
 TRY IT NOW Run a container from the log API image, publishing port 80 to host and connecting it to the same nat network:
 docker container run --name accesslog -d -p 801:80 --network nat access-log
 
 
 Listing 4.4 Dockerfile for building a Go application from source------------------------------------------------

 FROM diamol/golang AS builder
 COPY main.go .
 
 RUN go build -o /server
 
 # app
 FROM diamol/base
 
 ENV IMAGE_API_URL="http://iotd/image" \
       ACCESS_API_URL="http://accesslog/access-log"
 CMD ["/web/server"]
 
 WORKDIR web
 COPY index.html .
 COPY --from=builder /server .
 RUN chmod +x server
 
 
 TRY IT NOW Browse to the Go application source code and build the image:
 cd ch04/exercises/image-gallery
 docker image build -t image-gallery .
 
 TRY IT NOW Compare the Go application image size with the Go toolset image:
 docker image ls -f reference=diamol/golang -f reference=image-gallery
 
 TRY IT NOW Run the Go application image, publishing the host port and connecting to the nat network:
docker container run -d -p 802:80 --network nat image-gallery