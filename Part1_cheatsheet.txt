Docker cheatsheet
----ec2
ssh -i lgtv.pem ubuntu@ec2-3-108-62-130.ap-south-1.compute.amazonaws.com
scp -i lgtv.pem -r D:/dev/diamol ubuntu@ec2-3-108-62-130.ap-south-1.compute.amazonaws.com:/home/ubuntu/aakash404



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ch01--------------------------------------------------------------------


 Remembering the cleanup commands
Docker doesn’t automatically clean up containers or application packages for you. When you quit Docker Desktop (or stop the Docker service), all your containers stop and they don’t use any CPU or memory, but if you want to, you can clean up at the end of every chapter by running this command:

>docker container rm -f $(docker container ls -aq)
>docker rm -f $(docker ps -aq)
And if you want to reclaim disk space after following the exercises, you can run this command:

>docker image rm -f $(docker image ls -f reference='diamol/*' -q)
>



docker rm -f $(docker ps -aq)
docker image rm -f $(docker image ls -q)
docker image ls
docker ps


Docker is smart about downloading what it needs, so you can safely run these commands at any time. The next time you run containers, if Docker doesn’t find what it needs on your machine, it will download it for you.






--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ch02--------------------------------------------------------------------

TRY IT NOW Enter this command, which will run the Hello World container:
docker container run diamol/ch02-hello-diamol

TRY IT NOW Repeat the exact same Docker command:
docker container run diamol/ch02-hello-diamol

TRY IT NOW Run the following command in your terminal session:
docker container run --interactive --tty diamol/base

TRY IT NOW Open up a new terminal session, and you can get details of all the running containers with this command:
docker container ls

TRY IT NOW docker container top lists the processes running in the container. I’m using f1 as a short form of the container ID f1695de1f2ec :
 > docker container top f1

TRY IT NOW docker container logs displays any log entries the container has collected:
 > docker container logs f1

TRY IT NOW docker container inspect shows you all the details of a container:
> docker container inspect f1

TRY IT NOW Run docker container ls --all , which shows all containers in any status:
> docker container ls --all


TRY IT NOW Here’s a simple example, running a website in a container:
docker container run --detach --publish 8088:80 diamol/ch02-hello- diamol-web


TRY IT NOW docker container stats is another useful one: it shows a live view of how much CPU, memory, network, and disk the container is using. The output is slightly different for Linux and Windows containers:
> docker container stats e53

TRY IT NOW Run this command to remove all your containers:
docker container rm --force $(docker container ls --all --quiet)


 opening up an interactive shell for the Docker container (as done in the previous step with 
 docker exec -it container-name sh







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ch03-web-ping--------------------------------------------------------------------

TRY IT NOW Pull the container image for the web-ping application:
docker image pull diamol/ch03-web-ping

TRY IT NOW Let’s run a container from the image and see what the app does:
docker container run -d --name web-ping diamol/ch03-web-ping

TRY IT NOW Have a look at the logs from the application, which are being collected by Docker:
docker container logs web-ping

TRY IT NOW Remove the existing container, and run a new one with a value specified for the TARGET environment variable:
 docker rm -f web-ping
 docker container run --env TARGET=google.com diamol/ch03-web-ping

TRY IT NOW Turn this Dockerfile into a Docker image by running docker image build :
docker image build --tag web-ping .
The --tag argument is the name for the image, and the final argument is the directory where the Dockerfile and related files are.

TRY IT NOW List all the images where the tag name starts with “w”:
docker image ls 'w*'

TRY IT NOW Run a container from your own image to ping Docker’s website every five seconds:
docker container run -e TARGET=docker.com -e INTERVAL=5000 web-ping

TRY IT NOW Check the history for your web-ping image:
docker image history web-ping

TRY IT NOW You can list images with docker image ls , which also shows the size of the image. If you don’t include a filter in the command, you’ll see all images:(logical size of the image)
docker image ls


TRY IT NOW My image list shows a total of 363.96 MB of images, but that’s the total logical size. The system df command shows exactly how much disk space Docker is using:
docker system df

TRY IT NOW Make a change to the app.js file in the ch03-web-ping directory. It doesn’t have to be a code change; just adding a new empty line at the end of the file will do. Then build a new version of your Docker image:
docker image build -t web-ping:v2 .


Listing 3.2 The optimized web-ping Dockerfile

 FROM diamol/node
 CMD ["node", "/web-ping/app.js"]
 ENV TARGET="blog.sixeyed.com" \
       METHOD="HEAD" \
       INTERVAL="3000"
 WORKDIR /web-ping
 COPY app.js .

TRY IT NOW The optimized Dockerfile is in the source code for this chapter too. Switch to the web-ping-optimized folder and build the image from the new Dockerfile:

 cd ../web-ping-optimized
 docker image build -t web-ping:v3 .
 
 
 
 
 
 
 
 
 
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ch04--------------------------------------------------------------------

Listing 4.1 A multi-stage Dockerfile--------------------------

 FROM diamol/base AS build-stage
 RUN echo 'Building...' > /build.txt
 FROM diamol/base AS test-stage
 
 COPY --from=build-stage /build.txt /build.txt
 RUN echo 'Testing...' >> /build.txt
 
 FROM diamol/base
 COPY --from=test-stage /build.txt /build.txt
 CMD cat /build.txt
 
 TRY IT NOW Open a terminal session to the folder where you stored the book’s source code, and build this multi-stage Dockerfile:
 cd ch04/exercises/multi-stage
 docker image build -t multi-stage .
 
 
 
 Listing 4.2 Dockerfile for building a Java app with Maven-----------------------

 FROM diamol/maven AS builder
 
 WORKDIR /usr/src/iotd
 COPY pom.xml .
 RUN mvn -B dependency:go-offline
 
 COPY . .
 RUN mvn package
 
 # app
 FROM diamol/openjdk
 
 WORKDIR /app
 COPY --from=builder /usr/src/iotd/target/iotd-service-0.1.0.jar .
 
 EXPOSE 80
 ENTRYPOINT ["java", "-jar", "/app/iotd-service-0.1.0.jar"]
 
 
 TRY IT NOW Browse to the Java application source code and build the image:
 cd ch04/exercises/image-of-the-day
 docker image build -t image-of-the-day .
 
 -------------------------------------
 TRY IT NOW Create a Docker network for containers to communicate with each other:
 docker network create nat
 
 TRY IT NOW Run a container from the image, publishing port 80 to the host computer, and connecting to the nat network:
 docker container run --name iotd -d -p 800:80 --network nat image-of-the-day
 
 
 
 Listing 4.3 Dockerfile for building a Node.js app with npm----------------------------

 FROM diamol/node AS builder
 
 WORKDIR /src
 COPY src/package.json .
 
 RUN npm install
 
 # app
 FROM diamol/node
 
 EXPOSE 80
 CMD ["node", "server.js"]
 
 WORKDIR /app
 COPY --from=builder /src/node_modules/ /app/node_modules/
 COPY src/ .
 
 
 TRY IT NOW Browse to the Node.js application source code and build the image:
 cd ch04/exercises/access-log
 docker image build -t access-log .
 
 
 TRY IT NOW Run a container from the log API image, publishing port 80 to host and connecting it to the same nat network:
 docker container run --name accesslog -d -p 801:80 --network nat access-log
 
 
 Listing 4.4 Dockerfile for building a Go application from source------------------------------------------------

 FROM diamol/golang AS builder
 COPY main.go .
 
 RUN go build -o /server
 
 # app
 FROM diamol/base
 
 ENV IMAGE_API_URL="http://iotd/image" \
       ACCESS_API_URL="http://accesslog/access-log"
 CMD ["/web/server"]
 
 WORKDIR web
 COPY index.html .
 COPY --from=builder /server .
 RUN chmod +x server
 
 
 TRY IT NOW Browse to the Go application source code and build the image:
 cd ch04/exercises/image-gallery
 docker image build -t image-gallery .
 
 TRY IT NOW Compare the Go application image size with the Go toolset image:
 docker image ls -f reference=diamol/golang -f reference=image-gallery
 
 TRY IT NOW Run the Go application image, publishing the host port and connecting to the nat network:
docker container run -d -p 802:80 --network nat image-gallery



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ch05

TRY IT NOW Open a terminal session and save your Docker Hub ID in a variable. Your Docker ID is your username, not your email address. This is one command that is different on Windows and Linux, so you’ll need to choose the right option:

 # using PowerShell on Windows

 $dockerId="<your-docker-id-goes-here>"  

# using Bash on Linux or Mac 

export dockerId="<your-docker-id-goes-here>"


TRY IT NOW Log in to Docker Hub. Hub is the default registry, so you don’t need to specify a domain name:
 docker login --username $dockerId


TRY IT NOW Create a new reference for your existing image, tagging it as version 1:
 docker image tag image-gallery $dockerId/image-gallery:v1



TRY IT NOW List the image-gallery image references:
 docker image ls --filter reference=image-gallery --filter reference='*/image-gallery'



TRY IT NOW List the image-gallery image references:
 docker image push $dockerId/image-gallery:v1



TRY IT NOW Run the Docker registry in a container, using my image:
 # run the registry with a restart flag so the container gets 
# restarted whenever you restart Docker: 
docker container run -d -p 5000:5000 --restart always diamol/registry


run ping registry.local


TRY IT NOW Windows, Linux, and Mac machines all use the same hosts file format, but the file paths are different. The command is also different on Windows, so you’ll need to choose the right one:
creates that alias. It will give your computer the name registry.local 
 # using PowerShell on Windows 
Add-Content -Value "127.0.0.1 registry.local" -Path /windows/system32/drivers/etc/hosts  
# using Bash on Linux or Mac 
echo $'\n127.0.0.1 registry.local' | sudo tee -a /etc/hosts


TRY IT NOW Tag your image-gallery image with your registry domain:
 docker image tag image-gallery registry.local:5000/gallery/ui:v1

TRY IT NOW List the information about your Docker Engine and check your registry is in the insecure registries list:
 docker info


TRY IT NOW Push your tagged image:
 docker image push registry.local:5000/gallery/ui:v1


TRY IT NOW  List all repositories (effectively images):
curl -X GET http://registry.local:5000/v2/_catalog
> {"repositories":["redis","ubuntu"]}


TRY IT NOW Create a few new tags for the Go application you have packaged in the image to indicate the major, minor, and patch release versions:

docker image tag image-gallery registry.local:5000/gallery/ui:latest
docker image tag image-gallery registry.local:5000/gallery/ui:2
docker image tag image-gallery registry.local:5000/gallery/ui:2.1
docker image tag image-gallery registry.local:5000/gallery/ui:2.1.106
 

TRY IT NOW  Pushes all tags for the repo
 docker image push registry.local:5000/gallery/ui

TRY IT NOW  List all repositories adn tags
curl http://registry.local:5000/v2/gallery/ui/tags/list
 
TRY IT NOW   Get manifest for latest
curl --head   http://registry.local:5000/v2/gallery/ui/manifests/latest   -H 'Accept: application/vnd.docker.distribution.manifest.v2+json'

Output headers include Docker-Content-Digest, this is the manifest you need
e.g.
Docker-Content-Digest: sha256:127d0ed6f7a8d148a39b7ea168c083694d030e2bffbda60cb53057e731114fbb

TRY IT NOW  Delete
curl -X DELETE   http://registry.local:5000/v2/gallery/ui/manifests/sha256:127d0ed6f7a8d148a39b7ea168c083694d030e2bffbda60cb53057e731114fbb

TRY IT NOW  Check
curl http://registry.local:5000/v2/gallery/ui/tags/list








--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ch06


TRY IT NOW Open a terminal session and run two containers from the same image. The application in the image writes a random number to a file in the container:

docker container run --name rn1 diamol/ch06-random-number 
docker container run --name rn2 diamol/ch06-random-number


TRY IT NOW Use docker container cp to copy the random number file from each of the containers, and then check the contents:
 docker container cp rn1:/random/number.txt number1.txt
 docker container cp rn2:/random/number.txt number2.txt
 cat number1.txt
 cat number2.txt
 
 
 
 TRY IT NOW Run these commands to start a container that prints out its file contents, then change the file, and start the container again to print out the new file contents:
 docker container run --name f1 diamol/ch06-file-display
 echo "http://eltonstoneman.com" > url.txt
 docker container cp url.txt f1:/input.txt
 docker container start --attach f1
 
 
 
 TRY IT NOW Start a new container to check that the file in the image is unchanged. Then remove the original container and confirm that the data is gone:
 docker container run --name f2 diamol/ch06-file-display
 docker container rm -f f1
 docker container cp f1:/input.txt .
 
 
 
 TRY IT NOW Run a container for the to-do list app, and have a look at the volume Docker created:
 docker container run --name todo1 -d -p 8010:80 diamol/ch06-todo-list
 docker container inspect --format '{{.Mounts}}' todo1
 docker volume ls
 
 
 
 
 TRY IT NOW Run a second to-do list container and check the contents of the data directory. Then compare that to another new container that shares the volumes from the first container (the exec commands are slightly different for Windows and Linux):

 # this new container will have its own volume
 docker container run --name todo2 -d diamol/ch06-todo-list
 
 # on Linux:
 docker container exec todo2 ls /data
 
 # on Windows:
 docker container exec todo2 cmd /C "dir C:\data"
 
 # this container will share the volume from todo1
 docker container run -d --name t3 --volumes-from todo1 diamol/ch06-todo-list
 
 # on Linux:
 docker container exec t3 ls /data
 
 # on Windows:
 docker container exec t3 cmd /C "dir C:\data"
 
 
 
 
 TRY IT NOW Create a volume and use it in a container for version 1 of the to-do app. Then add some data in the UI and upgrade the app to version 2. The filesystem paths for the container need to match the operating system, so I’m using variables to make copy and pasting easier:

 # save the target file path in a variable:
 target='/data' # for Linux containers
 $target='c:\data' # for Windows containers
 
 # create a volume to store the data:
 docker volume create todo-list
 
 # run the v1 app, using the volume for app storage:
 docker container run -d -p 8011:80 -v todo-list:$target --name todo-v1 diamol/ch06-todo-list
 
 # add some data through the web app at http://localhost:8011
 
 # remove the v1 app container:
 docker container rm -f todo-v1
 
 # and run a v2 container using the same volume for storage:
 docker container run -d -p 8011:80 -v todo-list:$target --name todo-v2 diamol/ch06-todo-list:v2
 
 
 
 
 
 
 TRY IT NOW I really do have a server with a RAID array, but you may not, so we’ll just create a local directory on your host computer and bind mount it into a container. Again, the filesystem paths need to match the host operating system, so I’ve declared variables for the source path on your machine and the target path for the container. Note the different lines for Windows and Linux:

 $source="$(pwd)\databases".ToLower(); $target="c:\data" # Windows
 source="$(pwd)/databases" && target='/data'             # Linux
 
 mkdir ./databases
 
 docker container run --mount type=bind,source=$source,target=$target -d -p 8012:80 diamol/ch06-todo-list
 
 curl http://localhost:8012
 
 ls ./databases
 
 
 
 
 
 
 TRY IT NOW The to-do application will load an extra configuration file from the /app/config path if it exists. Run a container that bind-mounts a local directory to that location, and the app will use the host’s configuration file. Start by navigating to your local copy of the DIAMOL source code, and then run these commands:

 cd ./ch06/exercises/todo-list
 
 # save the source path as a variable:
 $source="$(pwd)\config".ToLower(); $target="c:\app\config" # Windows
 source="$(pwd)/config" && target='/app/config'             # Linux
 
 # run the container using the mount:
 docker container run --name todo-configured -d -p 8013:80 --mount type=bind,source=$source,target=$target,readonly diamol/ch06-todo-list
 
 # check the application:
 curl http://localhost:8013
 
 # and the container logs:
 docker container logs todo-configured
 
 
 
 
 TRY IT NOW Run the container without a mount, and it will list the directory contents from the image. Run it again with a mount, and it will list the contents of the source directory (there are variables again here to support Windows and Linux):

 cd ./ch06/exercises/bind-mount
 
 $source="$(pwd)\new".ToLower(); $target="c:\init" # Windows
 source="$(pwd)/new" && target='/init'             # Linux
 
 docker container run diamol/ch06-bind-mount
 
 docker container run --mount type=bind,source=$source,target=$target diamol/ch06-bind-mount
 
 
 
 TRY IT NOW The behavior of single-file mounts is different on Linux and Windows. If you have Linux and Windows containers available, you can see that in action:

 cd ./ch06/exercises/bind-mount
 
 # on Linux:
 docker container run --mount type=bind,source="$(pwd)/new/123.txt",target=/init/123.txt diamol/ch06-bind-mount
 
 # on Windows:
 
 docker container run --mount type=bind,source="$(pwd)/new/123.txt",target=C:\init\123.txt diamol/ch06-bind-mount
 
 docker container run diamol/ch06-bind-mount
 
 docker container run --mount type=bind,source="$(pwd)/new/123.txt",target=/init/123.txt diamol/ch06-bind-mount
 
 
 
 
 
 TRY IT NOW  lab06
docker container run -d -p 8015:80 diamol/ch06-lab
docker volume create ch06-lab

To put that together, we'll run a container which uses:
	a read-only bind mount to load the new config file into the container
	a read-write volume mount as the target for the database file

And this on Linux:

configSource="$(pwd)/solution"
configTarget='/app/config'
dataTarget='/new-data'

 docker container run -d -p 8016:80 --mount type=bind,source=$configSource,target=$configTarget,readonly --volume ch06-lab:$dataTarget diamol/ch06-lab

root@ip-172-31-34-29:/home/ubuntu/aakash404/diamol/ch06/lab# docker container inspect --format '{{.Mounts}}' f3
[{bind  /home/ubuntu/aakash404/diamol/ch06/lab/solution /app/config   false rprivate} {volume 7508b6ace03487f687a290222e9cb72415c9700547db43a7155f555f739c650a /var/lib/docker/volumes/7508b6ace03487f687a290222e9cb72415c9700547db43a7155f555f739c650a/_data /data local  true } {volume ch06-lab /var/lib/docker/volumes/ch06-lab/_data /new-data local z true }]






